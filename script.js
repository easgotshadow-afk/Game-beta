const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
const restartBtn = document.getElementById("restartBtn");

let currentPlayer = null;
let playerData = JSON.parse(localStorage.getItem("flappyPlayers")) || {};

document.getElementById("startGameBtn").addEventListener("click", () => {
  const nameInput = document.getElementById("playerName");
  const name = nameInput.value.trim() || "Guest";

  currentPlayer = name;

  if (!playerData[name]) {
    playerData[name] = { highScore: 0, gamesPlayed: 0, items: [] };
  }

  // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  applyPlayerItems();

  document.getElementById("playerForm").style.display = "none";
  bgMusic.play();
  update();
});


// ‡πÄ‡∏™‡∏µ‡∏¢‡∏á
const flapSound = new Audio("cartoon-jump-6462.mp3");
const hitSound = new Audio("game-over-417465.mp3");
const bgMusic = new Audio("pallet-town-pokemon-red-amp-blue-lofi-410591.mp3");
const coinSound = new Audio("coin-257878.mp3"); // ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
coinSound.volume = 0.5; // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏≠‡∏ö
bgMusic.loop = true;
bgMusic.volume = 0.4;

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
let bird = { x: 100, y: 200, width: 100, height: 100, dy: 0, padding: 20 };
let gravity = 0.5;
let jump = -10;
let pipes = [];
let pipeWidth = 50;
let pipeGap = 250;
let coinsCollected = 0; // ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ
let score = 0;
let gameOver = false;
let hitPlayed = false;
let particles = [];
let skyTime = 0;
let timeOfDay = 0; // 0 - 1 ‡∏Ñ‡∏∑‡∏≠ 0% ‡∏ñ‡∏∂‡∏á 100% ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô
let daySpeed = 0.001; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ
let invincibleTime = 0; // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
let stars = [];





// ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
const birdImg = new Image();
birdImg.src = "player.png";
const birdSprite = new Image();
birdSprite.src = "birds2.png"; // sprite sheet ‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å‡∏ù‡∏π‡∏á

// ‡πÄ‡∏°‡∏Ü
let clouds = [
  { x: 100, y: 80, size: 50 },
  { x: 400, y: 120, size: 40 },
  { x: 700, y: 60, size: 60 }
];

// ‡∏ó‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
pipes.push({ x: canvas.width, y: Math.random() * (canvas.height - pipeGap) });

// ‡∏†‡∏π‡πÄ‡∏Ç‡∏≤
let mountains = [
  { color: "#6ea56f", height: 200, speed: 0.2 }, // ‡∏ä‡∏±‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  { color: "#4e8b57", height: 300, speed: 0.15 }, // ‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á
  { color: "#2f6038", height: 400, speed: 0.1 }   // ‡∏ä‡∏±‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
];


// üïäÔ∏è ‡∏ù‡∏π‡∏á‡∏ô‡∏Å
let bgBirds = [];
const BIRD_FRAME_WIDTH = 64;
const BIRD_FRAME_HEIGHT = 64;
let birdFrame = 0;
let birdFrameDelay = 0;

for (let i = 0; i < 6; i++) {
  bgBirds.push({
    x: Math.random() * canvas.width,
    y: Math.random() * 250 + 50,
    speed: Math.random() * 2 + 1,
    scale: Math.random() * 0.5 + 0.5
  });
}

// ‡∏ß‡∏≤‡∏î‡∏ô‡∏Å‡∏ù‡∏π‡∏á
function drawRealisticBirds() {
  birdFrameDelay++;
  if (birdFrameDelay % 8 === 0) birdFrame = (birdFrame + 1) % 4;

  bgBirds.forEach(b => {
    ctx.drawImage(
      birdSprite,
      birdFrame * BIRD_FRAME_WIDTH, 0, BIRD_FRAME_WIDTH, BIRD_FRAME_HEIGHT,
      b.x, b.y, BIRD_FRAME_WIDTH * b.scale, BIRD_FRAME_HEIGHT * b.scale
    );
    b.x -= b.speed;
    if (b.x < -BIRD_FRAME_WIDTH) {
      b.x = canvas.width + Math.random() * 100;
      b.y = Math.random() * 250 + 50;
    }
  });
}

// ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
function drawBackground() {
  // ‡∏™‡∏µ‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô
  const morningTop = {r: 120, g: 180, b: 255};
  const morningBottom = {r: 255, g: 200, b: 150};

  const dayTop = {r: 70, g: 180, b: 255};
  const dayBottom = {r: 180, g: 220, b: 255};

  const eveningTop = {r: 255, g: 100, b: 200};
  const eveningBottom = {r: 255, g: 180, b: 120};

  const nightTop = {r: 10, g: 10, b: 40};
  const nightBottom = {r: 50, g: 50, b: 80};

  // timeOfDay: 0 - 1
  let topColor, bottomColor;

  if (timeOfDay < 0.25) { // ‡πÄ‡∏ä‡πâ‡∏≤ -> ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô
    const t = timeOfDay / 0.25;
    topColor = lerpColor(morningTop, dayTop, t);
    bottomColor = lerpColor(morningBottom, dayBottom, t);
  } else if (timeOfDay < 0.5) { // ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô -> ‡πÄ‡∏¢‡πá‡∏ô
    const t = (timeOfDay - 0.25) / 0.25;
    topColor = lerpColor(dayTop, eveningTop, t);
    bottomColor = lerpColor(dayBottom, eveningBottom, t);
  } else if (timeOfDay < 0.75) { // ‡πÄ‡∏¢‡πá‡∏ô -> ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
    const t = (timeOfDay - 0.5) / 0.25;
    topColor = lerpColor(eveningTop, nightTop, t);
    bottomColor = lerpColor(eveningBottom, nightBottom, t);
  } else { // ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô -> ‡πÄ‡∏ä‡πâ‡∏≤
    const t = (timeOfDay - 0.75) / 0.25;
    topColor = lerpColor(nightTop, morningTop, t);
    bottomColor = lerpColor(nightBottom, morningBottom, t);
  }

  const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
  gradient.addColorStop(0, `rgb(${topColor.r}, ${topColor.g}, ${topColor.b})`);
  gradient.addColorStop(1, `rgb(${bottomColor.r}, ${bottomColor.g}, ${bottomColor.b})`);

  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, canvas.width, canvas.height);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏µ‡πÅ‡∏ö‡∏ö‡πÑ‡∏•‡πà
function lerpColor(c1, c2, t) {
  return {
    r: Math.round(c1.r + (c2.r - c1.r) * t),
    g: Math.round(c1.g + (c2.g - c1.g) * t),
    b: Math.round(c1.b + (c2.b - c1.b) * t)
  };
}



// ‡πÄ‡∏°‡∏Ü
function drawCloud(x, y, size) {
  ctx.fillStyle = "white";
  ctx.beginPath();
  ctx.arc(x, y, size * 0.6, 0, Math.PI * 2);
  ctx.arc(x + size * 0.4, y + size * 0.2, size * 0.5, 0, Math.PI * 2);
  ctx.arc(x - size * 0.4, y + size * 0.1, size * 0.5, 0, Math.PI * 2);
  ctx.arc(x, y - size * 0.2, size * 0.4, 0, Math.PI * 2);
  ctx.fill();
}
function drawClouds() {
  clouds.forEach(c => {
    drawCloud(c.x, c.y, c.size);
    c.x -= 0.5;
    if (c.x + c.size < 0) c.x = canvas.width + c.size;
  });
}

// ‡∏†‡∏π‡πÄ‡∏Ç‡∏≤
function drawMountains() {
mountains.forEach(m => {
  const grad = ctx.createLinearGradient(0, canvas.height - m.height - 50, 0, canvas.height);
  grad.addColorStop(0, m.color); // ‡∏™‡∏µ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
  grad.addColorStop(1, "#1e3b20"); // ‡∏™‡∏µ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (‡πÄ‡∏á‡∏≤)
  ctx.fillStyle = grad;

  ctx.beginPath();
  ctx.moveTo(0, canvas.height);
  for (let x = 0; x <= canvas.width; x += 100) {
    const y = canvas.height - m.height + Math.sin((x + skyTime * 200 * m.speed) * 0.01) * 50;
    ctx.lineTo(x, y);
  }
  ctx.lineTo(canvas.width, canvas.height);
  ctx.closePath();
  ctx.fill();
});

}
function drawStars() {
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
  // timeOfDay 0.5 = ‡πÄ‡∏¢‡πá‡∏ô, 0.75 = ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏ï‡πá‡∏°, 1 = ‡πÄ‡∏ä‡πâ‡∏≤
  let alphaMultiplier = 0;

  if (timeOfDay >= 0.5 && timeOfDay < 0.6) { 
    // ‡∏î‡∏≤‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡πÇ‡∏ú‡∏•‡πà‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏¢‡πá‡∏ô
    alphaMultiplier = (timeOfDay - 0.5) / 0.1;
  } else if (timeOfDay >= 0.6 && timeOfDay < 0.9) {
    // ‡∏î‡∏≤‡∏ß‡πÄ‡∏ï‡πá‡∏°
    alphaMultiplier = 1;
  } else if (timeOfDay >= 0.9 && timeOfDay <= 1) {
    // ‡∏î‡∏≤‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏´‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤
    alphaMultiplier = 1 - (timeOfDay - 0.9) / 0.1;
  } else {
    alphaMultiplier = 0;
  }

  stars.forEach(star => {
    const alpha = alphaMultiplier * (0.5 + 0.5 * Math.sin(timeOfDay * 20 + star.brightness * 10));
    ctx.fillStyle = `rgba(255,255,255,${alpha})`;
    ctx.beginPath();
    ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
    ctx.fill();
  });
}


// ‡∏ô‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
function drawBird() {
  ctx.drawImage(birdImg, bird.x, bird.y, bird.width, bird.height);
}

// ‡∏ó‡πà‡∏≠
function drawPipe(x, y, isBottom) {
  const capHeight = 30;
  ctx.fillStyle = "#1ca500";
  ctx.fillRect(x, isBottom ? y : 0, pipeWidth, isBottom ? canvas.height - y : y);

  if (isBottom) {
    ctx.fillStyle = "#2bd600";
    ctx.fillRect(x - 5, y - capHeight, pipeWidth + 10, capHeight);
    ctx.fillStyle = "#118000";
    ctx.fillRect(x - 5, y - capHeight, pipeWidth + 10, 6);
  } else {
    ctx.fillStyle = "#2bd600";
    ctx.fillRect(x - 5, y, pipeWidth + 10, capHeight);
    ctx.fillStyle = "#118000";
    ctx.fillRect(x - 5, y + capHeight - 6, pipeWidth + 10, 6);
  }
}

function drawPipes() {
  pipes.forEach(pipe => {
    drawPipe(pipe.x, pipe.y, false);
    drawPipe(pipe.x, pipe.y + pipeGap, true);
  });
}

// ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
function drawScore() {
  const padding = 30; // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡πÉ‡∏´‡πâ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö
  ctx.fillStyle = "black";
  ctx.font = "30px Arial";
  ctx.textAlign = "left"; // ‡∏à‡∏±‡∏î‡∏ã‡πâ‡∏≤‡∏¢
  ctx.fillText("Score: " + score, padding, 50);
  ctx.fillText("Coins: " + coinsCollected, padding, 90);
}


// ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
function flap() {
  bird.dy = jump;
  flapSound.currentTime = 0;
  flapSound.play();
}

// ‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
function drawExplosion(x, y) {
  for (let i = 0; i < 30; i++) {
    particles.push({
      x, y,
      radius: Math.random() * 5 + 2,
      color: `hsl(${Math.random() * 60}, 100%, 50%)`,
      speedX: (Math.random() - 0.5) * 10,
      speedY: (Math.random() - 0.5) * 10,
      alpha: 1
    });
  }
}



function updateParticles() {
  for (let i = particles.length - 1; i >= 0; i--) {
    let p = particles[i];
    p.x += p.speedX;
    p.y += p.speedY;
    p.alpha -= 0.02;
    if (p.alpha <= 0) particles.splice(i, 1);
  }
}

function drawParticles() {
  particles.forEach(p => {
    ctx.beginPath();
    ctx.fillStyle = `rgba(255, ${Math.floor(100 + Math.random() * 155)}, 0, ${p.alpha})`;
    ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
    ctx.fill();
  });
}

// ‡∏õ‡∏∏‡πà‡∏° Restart
function showRestartButton() {
  restartBtn.style.display = "block";
}

function resetGame() {
  bird = { x: 100, y: 200, width: 100, height: 100, dy: 0, padding: 20 };
  pipes = [{ x: canvas.width, y: Math.random() * (canvas.height - pipeGap) }];
  score = 0;
  gameOver = false;
  hitPlayed = false;
  particles = [];
  restartBtn.style.display = "none";
  bgMusic.currentTime = 0;
  bgMusic.play();
  update();
}

restartBtn.addEventListener("click", resetGame);

// ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
const imagesToLoad = [birdImg, birdSprite];
let loadedImages = 0;
imagesToLoad.forEach(img => {
  img.onload = () => {
    loadedImages++;
    if (loadedImages === imagesToLoad.length) {
      update(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö
    }
  };
});


// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏≤‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° (‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
for (let i = 0; i < 100; i++) {
  stars.push({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height * 0.5, // ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    radius: Math.random() * 2 + 1,
    brightness: Math.random()
  });
}

// ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å
function update() {
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
  timeOfDay += daySpeed;
  if (timeOfDay > 1) timeOfDay = 0;

  if (gameOver && particles.length === 0) {
  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  if (currentPlayer) {
    const player = playerData[currentPlayer];
    player.gamesPlayed++;
    if (score > player.highScore) {
      player.highScore = score;
    }
    localStorage.setItem("flappyPlayers", JSON.stringify(playerData));

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const statsDiv = document.getElementById("stats");
    statsDiv.innerHTML = `
      üë§ ${currentPlayer}<br>
      üèÜ High Score: ${player.highScore}<br>
      üéÆ Games Played: ${player.gamesPlayed}
    `;
  }

  setTimeout(showRestartButton, 300);
  return;
}

  ctx.clearRect(0, 0, canvas.width, canvas.height);

// ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡πà‡∏≠‡∏ô
drawBackground();
drawStars();
// ‡∏ß‡∏≤‡∏î‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏£‡∏∞‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå
drawSun();
drawMoon();

// ‡∏ß‡∏≤‡∏î‡∏†‡∏π‡πÄ‡∏Ç‡∏≤ ‡πÄ‡∏°‡∏Ü ‡∏ù‡∏π‡∏á‡∏ô‡∏Å
drawMountains();
drawClouds();
drawRealisticBirds();

// ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡∏ó‡πà‡∏≠
drawBird();
drawPipes();


// ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
drawScore();
updateParticles();
drawParticles();

  bird.dy += gravity;
  bird.y += bird.dy;

  pipes.forEach(pipe => pipe.x -= 3);

  if (pipes[pipes.length - 1].x < canvas.width - 300) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
  const newPipe = { 
    x: canvas.width, 
    y: Math.random() * (canvas.height - pipeGap),
    width: Math.random() * 50 + 50 // ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° 50-100
  };
  pipes.push(newPipe);

  addCoin(newPipe); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç



}


  if (pipes[0].x + pipeWidth < 0) {
    pipes.shift();
    score++;
  }
// ===== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç =====
coins.forEach(coin => {
  // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
  coin.x -= 3;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏ô‡∏Å
  const dx = bird.x + bird.width / 2 - coin.x;
  const dy = bird.y + bird.height / 2 - coin.y;
  const distance = Math.sqrt(dx * dx + dy * dy);
  if (distance < coinRadius + bird.width / 2 && !coin.collected) {
    coin.collected = true;
    coinsCollected += 1;
    score += 5; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
    coinSound.currentTime = 0; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    coinSound.play(); // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
}

});

// ‡∏•‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
coins = coins.filter(coin => coin.x + coinRadius > 0);

// ‡∏ß‡∏≤‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
drawCoins();


  // ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡∏ô‡∏ó‡πà‡∏≠
pipes.forEach(pipe => {
  if (
    bird.x + bird.padding < pipe.x + pipeWidth &&
    bird.x + bird.width - bird.padding > pipe.x &&
    (bird.y + bird.padding < pipe.y ||
     bird.y + bird.height - bird.padding > pipe.y + pipeGap)
  ) {
    if(!invincible){ // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏°‡∏ï‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢ Game Over
      if (!gameOver) drawExplosion(bird.x + bird.width / 2, bird.y + bird.height / 2);
      gameOver = true;
      if (!hitPlayed) {
        hitSound.currentTime = 0;
        hitSound.play();
        hitPlayed = true;
      }
    }
  }
});


  // ‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á
  if (bird.y + bird.height > canvas.height || bird.y < 0) {
    gameOver = true;
    if (!hitPlayed) {
      hitSound.currentTime = 0;
      hitSound.play();
      hitPlayed = true;
    }
  }

  drawBird();
  drawPipes();
  drawScore();
  updateParticles();
  drawParticles();
 // ===== ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≠‡∏ô‡∏ó‡πâ‡∏≤‡∏¢ update() ‡∏Å‡πà‡∏≠‡∏ô requestAnimationFrame(update); =====
if (invincible) {
  invincibleTime -= 1/60; // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏° FPS 60
  if (invincibleTime <= 0) {
    invincible = false;
    invincibleTime = 0;
  }

  // ‡∏ß‡∏≤‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ö‡∏ô
  ctx.fillStyle = "yellow";
  ctx.font = "40px Arial";
  ctx.textAlign = "center"; // ‡∏à‡∏±‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
  ctx.fillText(`Invincible: ${Math.ceil(invincibleTime)}s`, canvas.width / 2, 50);
}


  requestAnimationFrame(update);
}

// ‡∏Å‡∏î Space ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
document.addEventListener("keydown", e => {
  if (e.code === "Space") {
    e.preventDefault();
    flap();
    if (bgMusic.paused) bgMusic.play();
  }
});
document.addEventListener("click", () => {
  flap();
  if (bgMusic.paused) bgMusic.play();
});
function drawSun() {
  const sunRadius = 50;
  const amplitude = canvas.height * 0.6; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏∂‡πâ‡∏ô
  const sunX = canvas.width / 2 + Math.cos(timeOfDay * 2 * Math.PI - Math.PI/2) * (canvas.width / 2);
  const sunY = canvas.height * 0.8 - Math.sin(timeOfDay * 2 * Math.PI - Math.PI/2) * amplitude;

  ctx.fillStyle = "yellow";
  ctx.beginPath();
  ctx.arc(sunX, sunY, sunRadius, 0, Math.PI * 2);
  ctx.fill();
}
function drawMoon() {
  const moonRadius = 40;
  const amplitude = canvas.height * 0.6;
  const moonX = canvas.width / 2 + Math.cos(timeOfDay * 2 * Math.PI - Math.PI/2 + Math.PI) * (canvas.width / 2);
  const moonY = canvas.height * 0.8 - Math.sin(timeOfDay * 2 * Math.PI - Math.PI/2 + Math.PI) * amplitude;

  ctx.fillStyle = "white";
  ctx.beginPath();
  ctx.arc(moonX, moonY, moonRadius, 0, Math.PI * 2);
  ctx.fill();
}
let coins = [];
const coinRadius = 15;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
function addCoin(pipe) {
  const coinY = pipe.y + Math.random() * (pipeGap - 50); // ‡∏ß‡∏≤‡∏á‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
  coins.push({
    x: pipe.x + pipeWidth / 2,
    y: coinY,
    collected: false
  });
}
function drawCoins() {
  coins.forEach(coin => {
    if (!coin.collected) {
      ctx.fillStyle = "gold";
      ctx.beginPath();
      ctx.arc(coin.x, coin.y, coinRadius, 0, Math.PI * 2);
      ctx.fill();
    }
  });
}
function showAllPlayers() {
  let statsHTML = "<h3>üèÖ Leaderboard</h3>";

  // ‡πÅ‡∏õ‡∏•‡∏á object ‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏≤‡∏Å -> ‡∏ô‡πâ‡∏≠‡∏¢
  let sortedPlayers = Object.entries(playerData).sort((a, b) => b[1].highScore - a[1].highScore);

  // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
  sortedPlayers.slice(0, 5).forEach(([name, data], i) => {
    statsHTML += `${i + 1}. ${name} ‚Äî üèÜ ${data.highScore} | üéÆ ${data.gamesPlayed}<br>`;
  });

  document.getElementById("stats").innerHTML = statsHTML;
}


// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
showAllPlayers();
document.getElementById("resetBtn").addEventListener("click", () => {
  if (confirm("‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?")) {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "playerData" ‡πÄ‡∏õ‡πá‡∏ô "flappyPlayers"
    localStorage.removeItem("flappyPlayers");
    playerData = {};
    showAllPlayers();
  }
});


const shopItems = [
  { 
    name: "Invincible 10s", 
    cost: 10, 
    effect: () => { 
      invincible = true;
      invincibleTime = 10; // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    } 
  }
];


// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏°‡∏ï‡∏∞
let invincible = false;


// ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô
document.getElementById("openShopBtn").addEventListener("click", openShop);

function openShop() {
  if (!currentPlayer) {
    alert("Please start the game first!");
    return;
  }

  const shopDiv = document.getElementById("shopItems");
  shopDiv.innerHTML = "";
  shopItems.forEach((item, index) => {
    // ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ owned ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    shopDiv.innerHTML += `
      <div style="margin-bottom:8px;">
        ${item.name} ‚Äî ${item.cost} ü™ô
        <button onclick="buyItem(${index})">Buy</button>
      </div>
    `;
  });
  document.getElementById("shop").style.display = "block";
}

function buyItem(index) {
  const item = shopItems[index];

  if (coinsCollected >= item.cost) {
    coinsCollected -= item.cost;

    if (!playerData[currentPlayer].items) playerData[currentPlayer].items = [];
    playerData[currentPlayer].items.push(item.name);
    localStorage.setItem("flappyPlayers", JSON.stringify(playerData));

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ó‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
    if (item.name === "Invincible 10s") {
      invincible = true;
      invincibleTime += 10; // ‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    } else {
      item.effect();
    }

    openShop();

    alert(`You bought ${item.name} and it's now active!`);
  } else {
    alert("Not enough coins!");
  }
}



function buyItem(index) {
  const item = shopItems[index];

  if (coinsCollected >= item.cost) {
    coinsCollected -= item.cost;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    if (!playerData[currentPlayer].items) playerData[currentPlayer].items = [];
    playerData[currentPlayer].items.push(item.name);
    localStorage.setItem("flappyPlayers", JSON.stringify(playerData));

    // ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    item.effect();

    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    openShop();

    alert(`You bought ${item.name} and it's now active!`);
  } else {
    alert("Not enough coins!");
  }
}

// ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
function applyPlayerItems() {
  if (currentPlayer && playerData[currentPlayer].items) {
    playerData[currentPlayer].items.forEach(name => {
      const item = shopItems.find(i => i.name === name);
      if (item) item.effect();
    });
  }
}
function closeShop() {
  const shopDiv = document.getElementById("shop");
  shopDiv.style.display = "none";
}
document.getElementById("openShopBtn").addEventListener("click", () => {
  const shopDiv = document.getElementById("shop");
  if (!currentPlayer) {
    alert("Please start the game first!");
    return;
  }
  shopDiv.style.display = "block";
});
  ctx.strokeStyle = "rgba(0,0,0,0.2)";
ctx.lineWidth = 3;
ctx.beginPath();
ctx.moveTo(0, canvas.height);
for (let x = 0; x <= canvas.width; x += 100) {
  const y = canvas.height - m.height + Math.sin((x + skyTime * 200 * m.speed) * 0.01) * 50;
  ctx.lineTo(x, y);
}
ctx.stroke();
for (let i = 0; i < 100; i++) {
  stars.push({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height * 0.5, // ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡∏ô
    radius: Math.random() * 2 + 1,
    brightness: Math.random()
  });
}
